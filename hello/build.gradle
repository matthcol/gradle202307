import java.nio.file.Files

plugins {
    // https://docs.gradle.org/current/userguide/java_plugin.html
    //    id 'java'

    // https://docs.gradle.org/current/userguide/application_plugin.html
    // superset of plugin java
    id 'application'

    // https://plugins.gradle.org/plugin/io.freefair.lombok
    id "io.freefair.lombok" version "8.1.0"
}

group = 'org.example'
version = '0.1'

repositories {
    mavenCentral()
}

// https://docs.gradle.org/current/userguide/declaring_dependencies.html#sec:dependency-types
dependencies {
    // lombok:annotationProcessor + compileOnly or use plugin
    //    annotationProcessor 'org.projectlombok:lombok:1.18.28'
    //    compileOnly 'org.projectlombok:lombok:1.18.28'

    // bean validation: constraints
    implementation 'jakarta.validation:jakarta.validation-api:3.0.2'
    // bean validation: testing constraints (compilation)
    testImplementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    // bean validation: testing constraints (runtime): need EL
    // NB [syntax] with or without parenthesis:
    testRuntimeOnly('org.glassfish.expressly:expressly:5.0.0')
    // testRuntimeOnly 'org.glassfish.expressly:expressly:5.0.0'
    // NB [syntax] with or without square brackets:
    // testRuntimeOnly group: 'org.glassfish.expressly', name: 'expressly', version: '5.0.0'
    // testRuntimeOnly(
    //    [group: 'org.glassfish.expressly', name: 'expressly', version: '5.0.0']
    // )

    // JUNIT:
    // use same version for all org.junit dependencies (BOM = Bill of Material)
    testImplementation platform('org.junit:junit-bom:5.9.3')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    // jupiter engine is handled directly by useJUnitPlatform()
    //    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
    // if you want to keep logs on stdout/sterr for all tests (default: failed)
    testLogging {
        events "passed", "skipped", "failed"
    }
}

// Specify Java Version
// https://docs.gradle.org/current/userguide/building_java_projects.html#sec:java_cross_compilation
// https://docs.gradle.org/current/userguide/toolchains.html#toolchains
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
        // vendor = JvmVendorSpec.matching("oracle")
    }
}

// available since Java 10
//compileJava {
//    options.release = 17
//}

jar {
    manifest {
        attributes(
                "Main-Class": "org.example.Main"
        )
    }
}

application {
    mainClass = "org.example.Main"
}

tasks.register('postJar'){
    doLast() {
        logger.lifecycle("Jar is ready")
    }
}


tasks.register('summary'){
    // local var in task
    def day = 'friday'
    dependsOn 'jar'
    dependsOn 'postJar'
    doLast {
        println 'Log with println'
        logger.quiet('An info log message which is always logged.')
        logger.error('An error log message.')
        logger.warn('A warning log message.')
        logger.lifecycle('A lifecycle info log message.')
        logger.info('An info log message.')
        logger.debug('A debug log message.')
        logger.trace('A trace log message.')

        // log local var and a property
        logger.info("Today is {}, let's finish {}", day, project.name)
    }
}

tasks.register('theEnd'){
    doLast() {
        logger.lifecycle("This is the end")
    }
}

postJar.configure {
    mustRunAfter 'jar'
}

summary.configure {
    finalizedBy theEnd
}

// task to create archive dir if not exists
tasks.register('ensureArchiveDirectory') {
    // outputs.files = ...
    // outputs.file(...)
    // outputs.files(...)
    outputs.dir(project.layout.projectDirectory.dir("archive"))
    doLast {
//        Files.createDirectories(archiveDir.toPath())
        Files.createDirectories(outputs.files.singleFile)
    }
}

// TODO: ZIP HTML reports

tasks.register('archiveJar', Copy){
    // dependsOn('jar')
    dependsOn('test')
    from jar
    from (project.layout.buildDirectory.dir("test-results")) {
        include "test/*.xml"
    }

    // destination
    //    into(project.layout.projectDirectory.dir("archive"))
    into(ensureArchiveDirectory.outputs.files.singleFile)

}